//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSystem/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""GameTouchMain"",
            ""id"": ""f06e92f8-c8ee-439a-b4e4-97a581b27857"",
            ""actions"": [
                {
                    ""name"": ""Touch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""329d7485-8c9a-40b3-82dd-20b2cfddb32f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""d28a5c5f-1be0-479b-b361-34eb384c5425"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""311991bd-513f-4380-8662-e614b27148e7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchDelta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1af257ab-4c10-4a83-b59c-b65c19c386f7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fe401e07-9a2c-4857-ab67-cd3664751892"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""746b45d1-f5de-406f-b485-711ce4e68a5d"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b639ddef-373a-4ee3-8fbd-02bfbf34c8ab"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eaecc08e-4e10-4c40-a372-de933c7101c1"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameTouchMain
        m_GameTouchMain = asset.FindActionMap("GameTouchMain", throwIfNotFound: true);
        m_GameTouchMain_Touch = m_GameTouchMain.FindAction("Touch", throwIfNotFound: true);
        m_GameTouchMain_TouchPress = m_GameTouchMain.FindAction("TouchPress", throwIfNotFound: true);
        m_GameTouchMain_TouchPosition = m_GameTouchMain.FindAction("TouchPosition", throwIfNotFound: true);
        m_GameTouchMain_TouchDelta = m_GameTouchMain.FindAction("TouchDelta", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameTouchMain
    private readonly InputActionMap m_GameTouchMain;
    private IGameTouchMainActions m_GameTouchMainActionsCallbackInterface;
    private readonly InputAction m_GameTouchMain_Touch;
    private readonly InputAction m_GameTouchMain_TouchPress;
    private readonly InputAction m_GameTouchMain_TouchPosition;
    private readonly InputAction m_GameTouchMain_TouchDelta;
    public struct GameTouchMainActions
    {
        private @GameInput m_Wrapper;
        public GameTouchMainActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touch => m_Wrapper.m_GameTouchMain_Touch;
        public InputAction @TouchPress => m_Wrapper.m_GameTouchMain_TouchPress;
        public InputAction @TouchPosition => m_Wrapper.m_GameTouchMain_TouchPosition;
        public InputAction @TouchDelta => m_Wrapper.m_GameTouchMain_TouchDelta;
        public InputActionMap Get() { return m_Wrapper.m_GameTouchMain; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameTouchMainActions set) { return set.Get(); }
        public void SetCallbacks(IGameTouchMainActions instance)
        {
            if (m_Wrapper.m_GameTouchMainActionsCallbackInterface != null)
            {
                @Touch.started -= m_Wrapper.m_GameTouchMainActionsCallbackInterface.OnTouch;
                @Touch.performed -= m_Wrapper.m_GameTouchMainActionsCallbackInterface.OnTouch;
                @Touch.canceled -= m_Wrapper.m_GameTouchMainActionsCallbackInterface.OnTouch;
                @TouchPress.started -= m_Wrapper.m_GameTouchMainActionsCallbackInterface.OnTouchPress;
                @TouchPress.performed -= m_Wrapper.m_GameTouchMainActionsCallbackInterface.OnTouchPress;
                @TouchPress.canceled -= m_Wrapper.m_GameTouchMainActionsCallbackInterface.OnTouchPress;
                @TouchPosition.started -= m_Wrapper.m_GameTouchMainActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.performed -= m_Wrapper.m_GameTouchMainActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.canceled -= m_Wrapper.m_GameTouchMainActionsCallbackInterface.OnTouchPosition;
                @TouchDelta.started -= m_Wrapper.m_GameTouchMainActionsCallbackInterface.OnTouchDelta;
                @TouchDelta.performed -= m_Wrapper.m_GameTouchMainActionsCallbackInterface.OnTouchDelta;
                @TouchDelta.canceled -= m_Wrapper.m_GameTouchMainActionsCallbackInterface.OnTouchDelta;
            }
            m_Wrapper.m_GameTouchMainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Touch.started += instance.OnTouch;
                @Touch.performed += instance.OnTouch;
                @Touch.canceled += instance.OnTouch;
                @TouchPress.started += instance.OnTouchPress;
                @TouchPress.performed += instance.OnTouchPress;
                @TouchPress.canceled += instance.OnTouchPress;
                @TouchPosition.started += instance.OnTouchPosition;
                @TouchPosition.performed += instance.OnTouchPosition;
                @TouchPosition.canceled += instance.OnTouchPosition;
                @TouchDelta.started += instance.OnTouchDelta;
                @TouchDelta.performed += instance.OnTouchDelta;
                @TouchDelta.canceled += instance.OnTouchDelta;
            }
        }
    }
    public GameTouchMainActions @GameTouchMain => new GameTouchMainActions(this);
    public interface IGameTouchMainActions
    {
        void OnTouch(InputAction.CallbackContext context);
        void OnTouchPress(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
        void OnTouchDelta(InputAction.CallbackContext context);
    }
}
